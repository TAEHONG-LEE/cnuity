import 'package:flutter/material.dart';
import 'package:mobile_scanner/mobile_scanner.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../../utils/qr_helper.dart';
import 'wake_result_screen.dart';

class ScanQrScreen extends StatelessWidget {
  const ScanQrScreen({super.key});

  Future<void> _handleScan(
    String? rawData,
    BuildContext context,
    MobileScannerController controller,
  ) async {
    if (rawData == null) return;

    try {
      final Map<String, dynamic> data = QrHelper.decodeQrData(rawData);
      debugPrint('üì¶ Î∞õÏùÄ QR Îç∞Ïù¥ÌÑ∞: $data');

      final user = FirebaseAuth.instance.currentUser;
      if (user == null) return;

      final String type = data['type'];
      final String seatIdFromQr = data['seatId'] ?? '';
      final String roomDocIdFromQr = data['roomDocId'] ?? '';
      final String scannedUid = data['uid'];
      final String currentUid = user.uid;

      // ‚úÖ Í≥†Ï†ï QR (seatId, roomDocIdÍ∞Ä ÎπÑÏñ¥ÏûàÏùÑ Îïå) Ï≤òÎ¶¨
      if (seatIdFromQr.isEmpty || roomDocIdFromQr.isEmpty) {
        final uid = user.uid;

        // 1. ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏùò ÏòàÏïΩ Ï¢åÏÑù Ï∞æÍ∏∞
        final seatSnapshot =
            await FirebaseFirestore.instance
                .collectionGroup('seats')
                .where('reservedBy', isEqualTo: uid)
                .limit(1)
                .get();

        if (seatSnapshot.docs.isEmpty) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('ÌòÑÏû¨ ÏòàÏïΩÎêú ÏûêÎ¶¨Í∞Ä ÏóÜÏäµÎãàÎã§.')));
          return;
        }

        final seatDoc = seatSnapshot.docs.first;
        final seatData = seatDoc.data();
        final seatId = seatData['seatId'] ?? '';
        final roomDocId = seatDoc.reference.parent.parent?.id ?? '';

        final sleepStart = (seatData['sleepStart'] as Timestamp?)?.toDate();
        final int sleepDuration = seatData['sleepDuration'] ?? 0;
        final wakeTime = DateTime.now();

        if (sleepStart == null) {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('ÏàòÎ©¥ ÏãúÏûë ÏãúÍ∞ÑÏù¥ ÏóÜÏäµÎãàÎã§.')));
          return;
        }

        // 2. Ïó¥ÎûåÏã§ Ïù¥Î¶Ñ Í∞ÄÏ†∏Ïò§Í∏∞
        final roomSnap =
            await FirebaseFirestore.instance
                .collection('reading_rooms')
                .doc(roomDocId)
                .get();
        final roomData = roomSnap.data();
        final readingRoomName = roomData?['name'] ?? 'Ïïå Ïàò ÏóÜÎäî Ïó¥ÎûåÏã§';
        final seatName = '$readingRoomName - $seatIdÎ≤à';

        // ‚úÖ WakeResultScreen Ïù¥Îèô
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder:
                (_) => WakeResultScreen(
                  seatName: seatName,
                  resultType: 'Ïä§Ïä§Î°ú Í∏∞ÏÉÅ',
                  wakerNickname: 'Î≥∏Ïù∏',
                  sleepStart: sleepStart,
                  wakeTime: wakeTime,
                  sleepDuration: sleepDuration,
                  pointsEarned: 0,
                ),
          ),
        );
        controller.stop();
        return;
      }

      // ‚úÖ ÏùºÎ∞ò QR (seatId, roomDocId Ìè¨Ìï®Îêú Í≤ΩÏö∞)
      final seatRef = FirebaseFirestore.instance
          .collection('reading_rooms')
          .doc(roomDocIdFromQr)
          .collection('seats')
          .doc(seatIdFromQr);

      final seatSnap = await seatRef.get();
      final seatData = seatSnap.data();

      if (seatData == null) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('Ï¢åÏÑù Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')));
        return;
      }

      final sleepStart = (seatData['sleepStart'] as Timestamp?)?.toDate();
      final wakeTime = (seatData['wakeTime'] as Timestamp?)?.toDate();
      final int sleepDuration = seatData['sleepDuration'] ?? 0;

      if (sleepStart == null || wakeTime == null) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(const SnackBar(content: Text('ÏàòÎ©¥ ÏãúÏûë ÎòêÎäî Í∏∞ÏÉÅ ÏãúÍ∞ÑÏù¥ ÏóÜÏäµÎãàÎã§.')));
        return;
      }

      // üî• Ïó¥ÎûåÏã§ Ïù¥Î¶Ñ ÏùΩÍ∏∞
      final roomSnap =
          await FirebaseFirestore.instance
              .collection('reading_rooms')
              .doc(roomDocIdFromQr)
              .get();
      final roomData = roomSnap.data();
      final readingRoomName = roomData?['name'] ?? 'Ïïå Ïàò ÏóÜÎäî Ïó¥ÎûåÏã§';

      // üî• seatName Ï°∞Ìï©
      final seatName = '$readingRoomName - $seatIdFromQrÎ≤à';

      // üî• Í∏∞ÏÉÅ Í≤∞Í≥º ÌÉÄÏûÖ Íµ¨Î∂Ñ
      String resultType = 'Í∏∞ÌÉÄ';
      if (type == 'wake_by_self') {
        resultType = 'Ïä§Ïä§Î°ú Í∏∞ÏÉÅ';
      } else if (type == 'wake_by_other') {
        resultType = 'ÌÉÄÏù∏Ïóê ÏùòÌï¥ Í∏∞ÏÉÅ';
      }

      // üî• Íπ®ÏõåÏ§Ä ÏÇ¨Îûå ÎãâÎÑ§ÏûÑ Í∞ÄÏ†∏Ïò§Í∏∞
      String wakerNickname = 'Î≥∏Ïù∏';
      if (type == 'wake_by_other' && scannedUid != currentUid) {
        final wakerSnap =
            await FirebaseFirestore.instance
                .collection('users')
                .doc(currentUid)
                .get();
        wakerNickname = wakerSnap.data()?['nickname'] ?? 'Ïïå Ïàò ÏóÜÏùå';
      }

      // üî• Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞ (ÏàòÎ©¥ ÏãúÍ∞Ñ Í∏∞Î∞ò, 1Î∂Ñ = 1Ìè¨Ïù∏Ìä∏ Í∞ÄÏ†ï)
      int points = wakeTime.difference(sleepStart).inMinutes;

      // ‚úÖ Í≤∞Í≥º ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder:
              (_) => WakeResultScreen(
                seatName: seatName,
                resultType: resultType,
                wakerNickname: wakerNickname,
                sleepStart: sleepStart,
                wakeTime: wakeTime,
                sleepDuration: sleepDuration,
                pointsEarned: points,
              ),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(
        context,
      ).showSnackBar(SnackBar(content: Text('QR Ï≤òÎ¶¨ Ïã§Ìå®: $e')));
    } finally {
      controller.stop();
    }
  }

  @override
  Widget build(BuildContext context) {
    final controller = MobileScannerController();

    return Scaffold(
      appBar: AppBar(
        title: const Text('QR Ïä§Ï∫îÏúºÎ°ú Í∏∞ÏÉÅ Ïù∏Ï¶ù'),
        backgroundColor: const Color(0xFF5197FF),
      ),
      body: MobileScanner(
        controller: controller,
        onDetect: (capture) {
          final barcode = capture.barcodes.first;
          final rawValue = barcode.rawValue;
          _handleScan(rawValue, context, controller);
        },
      ),
    );
  }
}
